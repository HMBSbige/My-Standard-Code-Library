/*
How many units for a segment tree?
----------
INPUT
1 10000
1 20000
1 30000
1 40000
1 50000
1 60000
1 70000
1 80000
1 90000
1 100000
1 200000
1 300000
1 400000
1 500000
1 600000
1 700000
1 800000
1 900000
1 1000000
1 2000000
1 3000000
1 4000000
1 5000000
------------
OUTPUT
[1, 10000] = 32753
[1, 20000] = 65521
[1, 30000] = 65533
[1, 40000] = 131057
[1, 50000] = 131069
[1, 60000] = 131069
[1, 70000] = 262113
[1, 80000] = 262129
[1, 90000] = 262137
[1, 100000] = 262141
[1, 200000] = 524285
[1, 300000] = 1048561
[1, 400000] = 1048573
[1, 500000] = 1048573
[1, 600000] = 2097137
[1, 700000] = 2097145
[1, 800000] = 2097149
[1, 900000] = 2097149
[1, 1000000] = 2097149
[1, 2000000] = 4194301
[1, 3000000] = 8388601
[1, 4000000] = 8388605
[1, 5000000] = 16777201
*/
#include<iostream>
#include<algorithm>
using namespace std;
//////////////////
class Segment {
private:
	int c;
public:
	void ini() { c = 0; }
	void cal(int l, int r, int rt);
	void out() { cout << c << endl; }
};
void Segment::cal(int l, int r, int rt) {
	if (l == r) {
		c = max(c, rt);
	}
	else {
		int m = (l + r) >> 1;
		cal(l, m, rt << 1);
		cal(m + 1, r, rt << 1 | 1);
	}
}
/////////////////
int main() {
	Segment s;
	int n,m;
	while (cin >>m>>n) {
		s.ini();
		s.cal(m, n, 1);
		cout << "["<<m<<", " << n << "] = ";
		s.out();
	}
	return 0;
}
